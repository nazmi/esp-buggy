####################
####################
## Style Check CI ##
####################
####################

name: Style Check


###############################
# Start the job on edited cpp #
###############################
on:
  pull_request:
    branches: [main]
    paths: 
    - 'include/**'
    - 'src/**'
  push:
    branches: [main]
    paths: 
    - 'include/**'
    - 'src/**'
  

###############
# Set the Job #
###############
jobs:
  cpp-linter:
    # Name the Job
    name: Lint Code Base
    # Set the agent to run on
    runs-on: ubuntu-latest

    ##################
    # Load all steps #
    ##################
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: C++ Lint (Push)
        if: ${{ github.event_name == 'push' }}
        run: |
          pip install cpplint
          python -m cpplint --quiet --linelength=150 --filter=-whitespace/indent,-legal/copyright,-build/header_guard,-build/include_subdir,-whitespace/blank_line,-build/include_order,-build/c++11 --recursive $( find src include -name \*.cpp -or -name \*.h | grep -vE \DSP )

      - name: C++ Lint (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          pip install cpplint
          python -m cpplint --quiet --linelength=150 --filter=-whitespace/indent,-legal/copyright,-build/header_guard,-build/include_subdir,-whitespace/blank_line,-build/include_order,-build/c++11 --recursive $( find src include -name \*.cpp -or -name \*.h | grep -vE \DSP ) |& tee cpplint.txt
              
      - name: Violation Comments Action
        if: ${{ github.event_name == 'pull_request' }}
        uses: tomasbjerre/violation-comments-action@master
        with:
            parser: CPPLINT
            regexp: '.*cpplint.txt$'
            # Optional config below
            keepOldComments: true # remove the old comments, or keep them
            commentTemplate: '{{violation.message}}' # see https://github.com/tomasbjerre/violation-comments-lib
            maxNumberOfViolations: 99 # Will only post this many comments
            severity: INFO # INFO, WARN or ERROR
            commentOnlyChangedContent: true # Comment only if violations in the changed part of PR
            commentOnlyChangedFiles: true # Comment only on the files that are changed in PR
            createSingleFileComments: true # Comment several comments, for each violation
            createCommentWithAllSingleFileComments: false # Create on big comment with all violations

      # If success, update badge to green
      - name: Update badge to green
        if: ${{ success() && github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_CPPLINT }}
          filename: lint_badge.json
          label: cpp-lint
          message: passing
          color: green

      # If fail, update badge to red
      - name: Update badge to red
        if: ${{ failure() && github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_CPPLINT }}
          filename: lint_badge.json
          label: cpp-lint
          message: failing
          color: red

      - name: Update Action Status
        run: |
          if [ -s cpplint.txt ]; then
                  exit 1
          else
                  exit 0
          fi